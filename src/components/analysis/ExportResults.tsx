
import React from 'react';
import { Download, FileText, Share } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { useToast } from '@/hooks/use-toast';
import { RealAnalysisResult, RealProcessedFile } from '@/utils/realAiProcessor';

interface ExportResultsProps {
  analysisResults: RealAnalysisResult;
  processedFiles: RealProcessedFile[];
}

const ExportResults = ({ analysisResults, processedFiles }: ExportResultsProps) => {
  const { toast } = useToast();

  const exportAsJSON = () => {
    const exportData = {
      timestamp: new Date().toISOString(),
      aiModel: 'claude-3-5-sonnet-20241022',
      analysis: analysisResults,
      documents: processedFiles.map(f => ({
        name: f.name,
        wordCount: f.metadata?.wordCount,
        topic: f.metadata?.topic,
        category: f.metadata?.category,
        status: f.status
      }))
    };
    
    const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `claude-analysis-${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "JSON Export Complete",
      description: "Analysis results exported as JSON file",
    });
  };

  const exportAsPDF = () => {
    // Create comprehensive report content
    const reportContent = `
# AI Research Analysis Report
Generated on: ${new Date().toLocaleDateString()}
AI Model: Claude 3.5 Sonnet

## Executive Summary
${analysisResults.summary.keyInsights.map(insight => `• ${insight.insight}`).join('\n')}

## Key Findings
${analysisResults.summary.keyInsights.map((insight, idx) => `
${idx + 1}. **${insight.category.toUpperCase()}**: ${insight.insight}
   - Confidence: ${insight.confidence}%
   - Sources: ${insight.sourceDocuments.join(', ')}
`).join('\n')}

## Document Connections
${analysisResults.connections.map((conn, idx) => `
${idx + 1}. **${conn.relationshipType.toUpperCase()}** (Strength: ${conn.strength}%)
   - Documents: ${conn.documents.join(', ')}
   - Description: ${conn.description}
   - Evidence: ${conn.evidence.join('; ')}
`).join('\n')}

${analysisResults.contradictions.length > 0 ? `
## Contradictions Found
${analysisResults.contradictions.map((contra, idx) => `
${idx + 1}. **${contra.severity.toUpperCase()}**: ${contra.issue}
   - Documents: ${contra.documents.join(', ')}
   - Description: ${contra.description}
   - Recommendation: ${contra.recommendation}
`).join('\n')}
` : ''}

## Research Gaps
${analysisResults.gaps.map((gap, idx) => `
${idx + 1}. **${gap.area}** (Priority: ${gap.priority})
   - Description: ${gap.description}
   - Suggested Sources: ${gap.suggestedSources.join(', ')}
`).join('\n')}

## Analysis Statistics
- Total Documents: ${analysisResults.statistics.totalDocuments}
- Total Words: ${analysisResults.statistics.totalWords.toLocaleString()}
- Analysis Depth: ${analysisResults.statistics.avgAnalysisDepth}%
- Processing Time: ${analysisResults.statistics.processingTime}
    `;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `research-report-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "Report Export Complete",
      description: "Comprehensive research report downloaded",
    });
  };

  const shareResults = async () => {
    const summary = `AI Research Analysis Summary:
• ${analysisResults.summary.keyInsights.length} key insights discovered
• ${analysisResults.connections.length} document connections found
• ${analysisResults.gaps.length} research gaps identified
• Analysis of ${analysisResults.statistics.totalDocuments} documents (${analysisResults.statistics.totalWords.toLocaleString()} words)

Generated by Claude AI Research Hub`;

    if (navigator.share) {
      try {
        await navigator.share({
          title: 'AI Research Analysis Results',
          text: summary,
        });
        toast({
          title: "Shared Successfully",
          description: "Analysis summary shared",
        });
      } catch (error) {
        console.error('Error sharing:', error);
      }
    } else {
      await navigator.clipboard.writeText(summary);
      toast({
        title: "Copied to Clipboard",
        description: "Analysis summary copied for sharing",
      });
    }
  };

  return (
    <Card className="bg-gray-800 border-gray-700">
      <CardHeader>
        <CardTitle className="text-white flex items-center">
          <FileText className="h-5 w-5 mr-2 text-cyan-400" />
          Export Analysis Results
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
          <Button
            onClick={exportAsJSON}
            variant="outline"
            className="border-gray-600 text-gray-300 hover:bg-gray-700"
          >
            <Download className="h-4 w-4 mr-2" />
            Export JSON
          </Button>
          <Button
            onClick={exportAsPDF}
            variant="outline"
            className="border-gray-600 text-gray-300 hover:bg-gray-700"
          >
            <FileText className="h-4 w-4 mr-2" />
            Export Report
          </Button>
          <Button
            onClick={shareResults}
            variant="outline"
            className="border-gray-600 text-gray-300 hover:bg-gray-700"
          >
            <Share className="h-4 w-4 mr-2" />
            Share Summary
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};

export default ExportResults;
